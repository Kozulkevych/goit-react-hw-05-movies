{"version":3,"file":"static/js/736.ad2c3b19.chunk.js","mappings":"4SAEaA,EAAWC,EAAAA,GAAAA,GAAH,kJASRC,EAAWD,EAAAA,GAAAA,GAAH,gEAKRE,EAAWF,EAAAA,GAAAA,IAAH,oGAORG,EAAYH,EAAAA,GAAAA,EAAH,6C,mBCqCtB,EAnDa,WACX,OAAwBI,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,mCAAG,2FACzBJ,GAAa,GADY,mBAGFK,EAAAA,EAAAA,IAAgBJ,GAHd,OAGjBK,EAHiB,OAIvBR,EAAQQ,GAJe,gDAMvBC,EAAAA,GAAAA,MAAY,qDANW,yBAQvBP,GAAa,GARU,4EAAH,qDAWxBI,GACD,GAAE,CAACH,KAGF,gCACGF,IAAa,SAACS,EAAA,EAAD,IACbX,GAAQA,EAAKY,OAAS,GACrB,SAAClB,EAAD,UACGM,EAAKa,KAAI,YAA4C,IAAzCT,EAAwC,EAAxCA,GAAIU,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAEnC,OACE,UAACpB,EAAD,YACE,SAACC,EAAD,CACEoB,IACEH,EAAY,UALC,mCAKD,OACUA,GAClBI,EAENC,IAAKJ,KAEP,SAACjB,EAAD,UAAYiB,KACZ,uCAAeC,OAVFZ,EAalB,OAGH,kDAIP,C,gFCvDYgB,E,QAAezB,GAAAA,IAAH,oO,SCCZgB,EAAS,WACpB,OACE,SAACS,EAAD,WACE,SAAC,KAAD,CACEC,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,KAIhB,C,mMCbKC,EAAM,mCAIL,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,0FACkBC,EAAAA,EAAAA,GAAM,qBAAsB,CACjDC,OAAQ,CAAEC,QAASL,EAAKE,KAAAA,KAFrB,uBACGI,EADH,EACGA,KADH,kBAIEA,EAAKC,SAJP,kEAOA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA+BC,EAAOP,GAAtC,0FACkBC,EAAAA,EAAAA,GAAM,eAAgB,CAC3CC,OAAQ,CAAEC,QAASL,EAAKS,MAAAA,EAAOP,KAAAA,KAF5B,uBACGI,EADH,EACGA,KADH,kBAIEA,EAAKC,SAJP,kEAOA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BhC,GAA/B,0FACkByB,EAAAA,EAAAA,GAAM,SAAD,OAAUzB,GAAM,CAC1C0B,OAAQ,CAAEC,QAASL,KAFhB,uBACGM,EADH,EACGA,KADH,kBAIEA,GAJF,kEAOA,SAAexB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BJ,GAA/B,0FACkByB,EAAAA,EAAAA,GAAM,SAAD,OAAUzB,EAAV,YAAwB,CAClD0B,OAAQ,CAAEC,QAASL,KAFhB,uBACGM,EADH,EACGA,KADH,kBAIEA,EAAKhC,MAJP,kEAOA,SAAeqC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BjC,GAA/B,0FACkByB,EAAAA,EAAAA,GAAM,SAAD,OAAUzB,EAAV,YAAwB,CAClD0B,OAAQ,CAAEC,QAASL,KAFhB,uBACGM,EADH,EACGA,KADH,kBAIEA,EAAKC,SAJP,kEA9BPJ,EAAAA,EAAAA,SAAAA,QADiB,+B","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","services/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  list-style: none;\n  display: flex;\n  max-width: 1200px;\n  flex-wrap: wrap;\n  gap: 5px;\n  justify-content: center;\n`;\n\nexport const CastItem = styled.li`\n  text-align: center;\n  width: 210px;\n`;\n\nexport const ActorImg = styled.img`\n  border-radius: 8px;\n  display: block;\n  width: 100%;\n  height: 320px;\n`;\n\nexport const ActorName = styled.p`\n  font-weight: 600;\n`;\n","import { useState, useEffect } from 'react';\nimport { getMovieCredits } from 'services/moviesApi';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport defaultImage from 'image/default_image.jpg';\nimport { CastList, CastItem, ActorImg, ActorName } from './Cast.styled';\nimport { toast } from 'react-toastify';\n\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchMoviesCredits = async () => {\n      setIsLoading(true);\n      try {\n        const result = await getMovieCredits(id);\n        setCast(result);\n      } catch (error) {\n        toast.error('Sorry, there was an error, please try again later');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMoviesCredits();\n  }, [id]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {cast && cast.length > 0 ? (\n        <CastList>\n          {cast.map(({ id, profile_path, name, character }) => {\n            const base_url_img = 'https://image.tmdb.org/t/p/w500';\n            return (\n              <CastItem key={id}>\n                <ActorImg\n                  src={\n                    profile_path\n                      ? `${base_url_img}${profile_path}`\n                      : defaultImage\n                  }\n                  alt={name}\n                />\n                <ActorName>{name}</ActorName>\n                <p>Character: {character}</p>\n              </CastItem>\n            );\n          })}\n        </CastList>\n      ) : (\n        <p>No information . . .</p>\n      )}\n    </>\n  );\n};\n\n\nexport default Cast;","import styled from 'styled-components';\n\nexport const LoaderStyled = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: 1;\n`;\n","import { RotatingLines } from 'react-loader-spinner';\nimport { LoaderStyled } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <LoaderStyled>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n    </LoaderStyled>\n  );\n};\n","import axios from 'axios';\n\nconst KEY = '6e14e7f7adc702d050e16bca3452efd9';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\naxios.defaults.baseURL = BASE_URL;\n\nexport async function getTrending(page) {\n  const { data } = await axios(`trending/movie/day`, {\n    params: { api_key: KEY, page },\n  });\n  return data.results;\n}\n\nexport async function getSearchMovies(query, page) {\n  const { data } = await axios('search/movie', {\n    params: { api_key: KEY, query, page },\n  });\n  return data.results;\n}\n\nexport async function getMovieDetails(id) {\n  const { data } = await axios(`movie/${id}`, {\n    params: { api_key: KEY },\n  });\n  return data;\n}\n\nexport async function getMovieCredits(id) {\n  const { data } = await axios(`movie/${id}/credits`, {\n    params: { api_key: KEY },\n  });\n  return data.cast;\n}\n\nexport async function getMovieReviews(id) {\n  const { data } = await axios(`movie/${id}/reviews`, {\n    params: { api_key: KEY },\n  });\n  return data.results;\n}\n"],"names":["CastList","styled","CastItem","ActorImg","ActorName","useState","cast","setCast","isLoading","setIsLoading","id","useParams","useEffect","fetchMoviesCredits","getMovieCredits","result","toast","Loader","length","map","profile_path","name","character","src","defaultImage","alt","LoaderStyled","strokeColor","strokeWidth","animationDuration","width","visible","KEY","getTrending","page","axios","params","api_key","data","results","getSearchMovies","query","getMovieDetails","getMovieReviews"],"sourceRoot":""}