{"version":3,"file":"static/js/250.8e80e339.chunk.js","mappings":"gMAEaA,E,QAAeC,GAAAA,IAAH,oO,SCCZC,EAAS,WACpB,OACE,SAACF,EAAD,WACE,SAAC,KAAD,CACEG,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,KAIhB,C,kLCbYC,EAAcP,EAAAA,GAAAA,GAAH,kJASXQ,EAAaR,EAAAA,GAAAA,GAAH,gHAOVS,EAAST,EAAAA,GAAAA,EAAH,+IASNU,EAAUV,EAAAA,GAAAA,EAAH,sG,mBCoBpB,EAxCgB,WACd,OAA8BW,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,mCAAG,2FACzBJ,GAAa,GADY,mBAGFK,EAAAA,EAAAA,IAAgBJ,GAHd,OAGjBK,EAHiB,OAIvBR,EAAWQ,GAJY,gDAMvBC,EAAAA,GAAAA,MAAY,qDANW,yBAQvBP,GAAa,GARU,4EAAH,qDAWxBI,GACD,GAAE,CAACH,KAGF,gCACGF,IAAa,SAACb,EAAA,EAAD,IACbW,IACqB,IAAnBA,EAAQW,QACP,qEAEA,SAAChB,EAAD,UACGK,EAAQY,KAAI,gBAAGR,EAAH,EAAGA,GAAIS,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,UAAClB,EAAD,YACE,UAACC,EAAD,sBAAiBgB,EAAjB,QACA,SAACf,EAAD,UAAUgB,MAFKV,EADN,SAUxB,C,mMC3CKW,EAAM,mCAIL,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,0FACkBC,EAAAA,EAAAA,GAAM,qBAAsB,CACjDC,OAAQ,CAAEC,QAASL,EAAKE,KAAAA,KAFrB,uBACGI,EADH,EACGA,KADH,kBAIEA,EAAKC,SAJP,kEAOA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA+BC,EAAOP,GAAtC,0FACkBC,EAAAA,EAAAA,GAAM,eAAgB,CAC3CC,OAAQ,CAAEC,QAASL,EAAKS,MAAAA,EAAOP,KAAAA,KAF5B,uBACGI,EADH,EACGA,KADH,kBAIEA,EAAKC,SAJP,kEAOA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BrB,GAA/B,0FACkBc,EAAAA,EAAAA,GAAM,SAAD,OAAUd,GAAM,CAC1Ce,OAAQ,CAAEC,QAASL,KAFhB,uBACGM,EADH,EACGA,KADH,kBAIEA,GAJF,kEAOA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+BtB,GAA/B,0FACkBc,EAAAA,EAAAA,GAAM,SAAD,OAAUd,EAAV,YAAwB,CAClDe,OAAQ,CAAEC,QAASL,KAFhB,uBACGM,EADH,EACGA,KADH,kBAIEA,EAAKM,MAJP,kEAOA,SAAenB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BJ,GAA/B,0FACkBc,EAAAA,EAAAA,GAAM,SAAD,OAAUd,EAAV,YAAwB,CAClDe,OAAQ,CAAEC,QAASL,KAFhB,uBACGM,EADH,EACGA,KADH,kBAIEA,EAAKC,SAJP,kEA9BPJ,EAAAA,EAAAA,SAAAA,QADiB,+B","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/Reviews/Rewiews.styled.jsx","components/Reviews/Reviews.jsx","services/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderStyled = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: 1;\n`;\n","import { RotatingLines } from 'react-loader-spinner';\nimport { LoaderStyled } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <LoaderStyled>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n    </LoaderStyled>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  align-items: stretch;\n  flex-direction: column;\n  flex-wrap: wrap;\n  gap: 30px;\n  padding: 36px;\n`;\n\nexport const ReviewItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n  gap: 15px;\n`;\n\nexport const Author = styled.p`\n  font-weight: 600;\n  font-size: 18px;\n  font-style: italic;\n  display: flex;\n  width: max-content;\n  margin: 0;\n`;\n\nexport const Content = styled.p`\n  font-size: 16px;\n  text-indent: 5%;\n  text-align: justify;\n  margin: 0;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport { getMovieReviews } from 'services/moviesApi';\nimport { ReviewsList, ReviewItem, Author, Content } from './Rewiews.styled';\nimport { toast } from 'react-toastify';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchMoviesReviews = async () => {\n      setIsLoading(true);\n      try {\n        const result = await getMovieReviews(id);\n        setReviews(result);\n      } catch (error) {\n        toast.error('Sorry, there was an error, please try again later');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMoviesReviews();\n  }, [id]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {reviews &&\n        (reviews.length === 0 ? (\n          <p>We don't have any reviews for this movie</p>\n        ) : (\n          <ReviewsList>\n            {reviews.map(({ id, author, content }) => (\n              <ReviewItem key={id}>\n                <Author>Author: {author} </Author>\n                <Content>{content}</Content>\n              </ReviewItem>\n            ))}\n          </ReviewsList>\n        ))}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst KEY = '6e14e7f7adc702d050e16bca3452efd9';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\naxios.defaults.baseURL = BASE_URL;\n\nexport async function getTrending(page) {\n  const { data } = await axios(`trending/movie/day`, {\n    params: { api_key: KEY, page },\n  });\n  return data.results;\n}\n\nexport async function getSearchMovies(query, page) {\n  const { data } = await axios('search/movie', {\n    params: { api_key: KEY, query, page },\n  });\n  return data.results;\n}\n\nexport async function getMovieDetails(id) {\n  const { data } = await axios(`movie/${id}`, {\n    params: { api_key: KEY },\n  });\n  return data;\n}\n\nexport async function getMovieCredits(id) {\n  const { data } = await axios(`movie/${id}/credits`, {\n    params: { api_key: KEY },\n  });\n  return data.cast;\n}\n\nexport async function getMovieReviews(id) {\n  const { data } = await axios(`movie/${id}/reviews`, {\n    params: { api_key: KEY },\n  });\n  return data.results;\n}\n"],"names":["LoaderStyled","styled","Loader","strokeColor","strokeWidth","animationDuration","width","visible","ReviewsList","ReviewItem","Author","Content","useState","reviews","setReviews","isLoading","setIsLoading","id","useParams","useEffect","fetchMoviesReviews","getMovieReviews","result","toast","length","map","author","content","KEY","getTrending","page","axios","params","api_key","data","results","getSearchMovies","query","getMovieDetails","getMovieCredits","cast"],"sourceRoot":""}